package com.arasaka.re_malwack.service

import android.app.Notification
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.os.IBinder
import androidx.core.app.NotificationCompat
import com.arasaka.re_malwack.MainActivity
import com.arasaka.re_malwack.R
import com.arasaka.re_malwack.ReMalwackApplication
import com.arasaka.re_malwack.utils.Constants
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch

class HostsUpdateService : Service() {
    
    private val serviceScope = CoroutineScope(Dispatchers.IO + Job())
    private lateinit var notificationManager: NotificationManager
    
    override fun onCreate() {
        super.onCreate()
        notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
    }
    
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            Constants.ACTION_UPDATE_HOSTS -> {
                startForeground(Constants.NOTIFICATION_ID_HOSTS_UPDATE, createNotification())
                updateHosts()
            }
            else -> {
                stopSelf()
            }
        }
        
        return START_NOT_STICKY
    }
    
    override fun onBind(intent: Intent?): IBinder? = null
    
    private fun createNotification(): Notification {
        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        return NotificationCompat.Builder(this, Constants.NOTIFICATION_CHANNEL_HOSTS_UPDATE)
            .setContentTitle(getString(R.string.notification_updating_hosts))
            .setContentText(getString(R.string.notification_updating_hosts_description))
            .setSmallIcon(R.drawable.ic_notification)
            .setContentIntent(pendingIntent)
            .setOngoing(true)
            .setProgress(0, 0, true)
            .build()
    }
    
    private fun updateNotificationProgress(progress: Int, max: Int = 100) {
        val notification = NotificationCompat.Builder(this, Constants.NOTIFICATION_CHANNEL_HOSTS_UPDATE)
            .setContentTitle(getString(R.string.notification_updating_hosts))
            .setContentText("${progress}% ${getString(R.string.notification_progress_complete)}")
            .setSmallIcon(R.drawable.ic_notification)
            .setProgress(max, progress, false)
            .setOngoing(true)
            .build()
        
        notificationManager.notify(Constants.NOTIFICATION_ID_HOSTS_UPDATE, notification)
    }
    
    private fun updateHosts() {
        serviceScope.launch {
            try {
                val rootRepository = (application as ReMalwackApplication).rootRepository
                
                updateNotificationProgress(10)
                
                if (!rootRepository.isRootAvailable()) {
                    showErrorNotification(getString(R.string.error_no_root))
                    stopSelf()
                    return@launch
                }
                
                updateNotificationProgress(30)
                
                rootRepository.backupHostsFile()
                
                updateNotificationProgress(50)
                
                val hostsContent = downloadHosts()
                
                updateNotificationProgress(80)
                
                rootRepository.updateHostsFile(hostsContent).fold(
                    onSuccess = {
                        updateNotificationProgress(100)
                        showSuccessNotification()
                        
                        rootRepository.flushDnsCache()
                    },
                    onFailure = { error ->
                        showErrorNotification(error.message ?: "Unknown error")
                    }
                )
                
            } catch (e: Exception) {
                showErrorNotification(e.message ?: "Unexpected error")
            } finally {
                stopSelf()
            }
        }
    }
    
    private fun downloadHosts(): String {
        return """
            # Re-Malwack Hosts File
            # Generated by Re-Malwack App
            
            127.0.0.1 localhost
            ::1 localhost
            
            # Blocked domains
            0.0.0.0 doubleclick.net
            0.0.0.0 googleadservices.com
            0.0.0.0 googlesyndication.com
        """.trimIndent()
    }
    
    private fun showSuccessNotification() {
        val notification = NotificationCompat.Builder(this, Constants.NOTIFICATION_CHANNEL_STATUS)
            .setContentTitle(getString(R.string.notification_update_complete))
            .setContentText(getString(R.string.notification_hosts_updated_successfully))
            .setSmallIcon(R.drawable.ic_notification)
            .setAutoCancel(true)
            .build()
        
        notificationManager.notify(Constants.NOTIFICATION_ID_STATUS, notification)
    }
    
    private fun showErrorNotification(error: String) {
        val notification = NotificationCompat.Builder(this, Constants.NOTIFICATION_CHANNEL_ERROR)
            .setContentTitle(getString(R.string.notification_update_failed))
            .setContentText(error)
            .setSmallIcon(R.drawable.ic_notification)
            .setAutoCancel(true)
            .build()
        
        notificationManager.notify(Constants.NOTIFICATION_ID_ERROR, notification)
    }
} 